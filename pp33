using System.Text.Json;

namespace PipeModels;

public class JSerialize<T>
{
    public T Source { get; set; }
    public string FilePath { get; set; }
    private string serializedJson; // Ее сохраняем
    private string loadedString; // Считывем сохраненное

    public JSerialize(T ssource, string filePath)
    {
        this.Source = ssource;
        this.FilePath = filePath;
    }

    public void DoSerialize()
    {
        string serializedJson = JsonSerializer.Serialize(this.Source);
    }

    public void DoSave()
    {
        if (this.serializedJson != null)
        {
            File.WriteAllText(this.FilePath, this.serializedJson);
        }
    }

    public void DoRead()
    {
        using (Stream stream = new FileStream(this.FilePath, FileMode.OpenOrCreate, FileAccess.ReadWrite, FileShare.ReadWrite))
        {
            if (File.Exists(this.FilePath) && stream.Length > 0)
            {
                string fileContents;
                using (StreamReader reader = new StreamReader(stream))
                {
                    this.loadedString = reader.ReadToEnd();
                }
            }
            else
            {
                ;
            }
        }
    }
    public void DoDecerialize()
    {
        if ((this.loadedString != null) && (this.loadedString.Length > 0))
        {
            T? obj = JsonSerializer.Deserialize<T>(this.loadedString);
        }
    }
}
